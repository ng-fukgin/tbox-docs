(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{154:function(t,e,i){"use strict";i.r(e);var r=i(0),_=Object(r.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._v(" "),i("p",[t._v("TBOX是一个用c语言实现的跨平台开发库。")]),t._v(" "),i("p",[t._v("针对各个平台，封装了统一的接口，简化了各类开发过程中常用操作，使你在开发过程中，更加关注实际应用的开发，而不是把时间浪费在琐碎的接口兼容性上面，并且充分利用了各个平台独有的一些特性进行优化。")]),t._v(" "),i("p",[t._v("这个项目的目的，是为了使C开发更加的简单高效。")]),t._v(" "),i("p",[t._v("目前支持的平台有：")]),t._v(" "),t._m(1),t._v(" "),i("p",[t._v("通过"),i("a",{attrs:{href:"http://www.xmake.io/cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("xmake"),i("OutboundLink")],1),t._v("支持各种编译模式：")]),t._v(" "),t._m(2),t._v(" "),i("p",[t._v("如果你想了解更多，请参考：")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"http://www.tboox.org/cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("项目主页"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/tboox/tbox/wiki/%E7%9B%AE%E5%BD%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线文档"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/tboox/tbox",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://gitee.com/tboox/tbox",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitee"),i("OutboundLink")],1)])]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),i("p",[t._v("针对http、file、socket、data等流数据，实现统一接口进行读写，并且支持: 阻塞、非阻塞、异步 三种读写模式。\n支持中间增加多层filter流进行流过滤，实现边读取，内部边进行解压、编码转换、加密等操作，极大的减少了内存使用。")]),t._v(" "),i("p",[t._v("主要提供以下模块：")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),i("ul",[i("li",[t._v("快速高效的协程切换支持（具体性能参考："),i("a",{attrs:{href:"http://tboox.org/cn/2016/10/28/benchbox-coroutine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("基准测试报告"),i("OutboundLink")],1),t._v("）")]),t._v(" "),i("li",[t._v("提供跨平台支持，核心切换算法参考boost，并且对其进行重写和优化，目前支持架构：x86, x86_64, arm, arm64, mips32")]),t._v(" "),i("li",[t._v("提供channel协程间数据通信支持，基于生产、消费者模型")]),t._v(" "),i("li",[t._v("提供信号量、协程锁支持")]),t._v(" "),i("li",[t._v("socket、stream都模块原生支持协程，并且可在线程和协程间进行无缝切换")]),t._v(" "),i("li",[t._v("提供http、file等基于协程的简单服务器实例，只需几百行代码，就可以从socket开始写个高性能io服务器，代码逻辑比异步回调模式更加清晰")]),t._v(" "),i("li",[t._v("同时提供stackfull, stackless两种协程模式支持，stackless协程更加的轻量（每个协程只占用几十个bytes），切换更快（会牺牲部分易用性）")]),t._v(" "),i("li",[t._v("支持epoll, kqueue, poll, select 和 IOCP")])]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),i("p",[t._v("一些使用tbox的项目")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://github.com/tboox/gbox",target:"_blank",rel:"noopener noreferrer"}},[t._v("gbox"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/tboox/vm86",target:"_blank",rel:"noopener noreferrer"}},[t._v("vm86"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"http://www.xmake.io/cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("xmake"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/tboox/itrace",target:"_blank",rel:"noopener noreferrer"}},[t._v("itrace"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/tboox/tbox/wiki/%E4%BD%BF%E7%94%A8tbox%E7%9A%84%E5%BC%80%E6%BA%90%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多项目"),i("OutboundLink")],1)])]),t._v(" "),t._m(38),t._v(" "),i("ul",[t._m(39),t._v(" "),i("li",[t._v("主页："),i("a",{attrs:{href:"http://www.tboox.org/cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("TBOOX开源工程"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("社区："),i("a",{attrs:{href:"https://www.reddit.com/r/tboox/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reddit论坛"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("QQ群：343118190")]),t._v(" "),i("li",[t._v("微信公众号：tboox-os")])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 简介")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[t._v("Windows")]),t._v(" "),i("li",[t._v("Macosx")]),t._v(" "),i("li",[t._v("Linux")]),t._v(" "),i("li",[t._v("Android")]),t._v(" "),i("li",[t._v("iOS")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Release: 正式版编译，禁用调试信息、断言，各种检测机制，启用编译器优化")]),this._v(" "),e("li",[this._v("Debug: 调试模式，默认启用详细调试信息、断言、内存越界检测、内存泄漏、锁竞争分析等检测机制")]),this._v(" "),e("li",[this._v("Small: 最小化编译，默认禁用所有扩展模块，启用编译器最小化优化")]),this._v(" "),e("li",[this._v("Micro: 针对嵌入式平台，仅仅编译tbox微内核，仅提供最基础的跨平台接口，生成库仅64K左右（内置轻量libc接口实现）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性","aria-hidden":"true"}},[this._v("#")]),this._v(" 特性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"流库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流库","aria-hidden":"true"}},[this._v("#")]),this._v(" 流库")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[i("code",[t._v("stream")]),t._v("：通用非阻塞流，用于一般的单独io处理，同时支持协程以实现异步传输。")]),t._v(" "),i("li",[i("code",[t._v("transfer")]),t._v("：流传输器，维护两路流的传输。")]),t._v(" "),i("li",[i("code",[t._v("static_stream")]),t._v("：针对静态数据buffer优化的静态流，用于轻量快速的数据解析。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"协程库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协程库","aria-hidden":"true"}},[this._v("#")]),this._v(" 协程库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("统一并简化数据库操作接口，适配各种数据源，通过统一的url来自动连接打开支持的数据库，数据的枚举采用迭代器模型。")]),this._v(" "),e("li",[this._v("目前支持sqlite3以及mysql两种关系型数据库，也可自定义扩展使用其他关系型数据库。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"xml库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xml库","aria-hidden":"true"}},[this._v("#")]),this._v(" xml库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("针对xml提供DOM和SAX两种解析模式，SAX方式采用外部迭代模式，灵活性和性能更高，并且可以选择指定路径，进行解析。")]),this._v(" "),e("li",[this._v("解析过程完全基于stream，所以是高度流化的，可以实现边下载、边解压、边转码、边解析一条龙服务，使用较低的内存也可以解析大规模数据。")]),this._v(" "),e("li",[this._v("提供xml writer以支持对xml生成")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"内存库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存库","aria-hidden":"true"}},[this._v("#")]),this._v(" 内存库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("参考linux内核内存管理机制的实现，并对其进行各种改造和优化，所实现的TBOX独有的一整套内存池管理架构。")]),this._v(" "),e("li",[this._v("调试模式下，可以轻松检测并定位内存泄露、内存越界溢出、内存重叠覆盖等常见内存问题，并对整体内存的使用进行了统计和简要分析。")]),this._v(" "),e("li",[this._v("针对大块数据、小块数据、字符串数据进行了充分的利用，避免了大量外部碎片和内部碎片的产生。分配操作进行了各种优化，96%的情况下，效率都是在O(1)。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"容器库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器库","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("提供哈希、链表、数组、队列、堆栈、最小最大堆等常用容器。")]),this._v(" "),e("li",[this._v("支持各种常用成员类型，在原有的容器期初上，其成员类型还可以完全自定义扩展。")]),this._v(" "),e("li",[this._v("所有容器都支持迭代器操作。")]),this._v(" "),e("li",[this._v("大部分容器都可以支持基于stream的序列化和反序列化操作。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"算法库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法库","aria-hidden":"true"}},[this._v("#")]),this._v(" 算法库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("提供各种排序算法：冒泡排序、堆排序、快速排序、插入排序。")]),this._v(" "),e("li",[this._v("提供各种查找算法：线性遍历、二分法搜索。")]),this._v(" "),e("li",[this._v("提供各种遍历、删除、统计算法。")]),this._v(" "),e("li",[this._v("以迭代器为接口，实现算法和容器的分离，类似stl，但是c实现的，更加轻量。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"网络库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络库","aria-hidden":"true"}},[this._v("#")]),this._v(" 网络库")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[t._v("实现http客户端模块")]),t._v(" "),i("li",[t._v("实现cookies")]),t._v(" "),i("li",[t._v("实现dns解析与缓存")]),t._v(" "),i("li",[t._v("实现ssl(支持openssl, polarssl, mbedtls)")]),t._v(" "),i("li",[t._v("支持ipv4、ipv6")]),t._v(" "),i("li",[t._v("支持通过协程实现异步模式")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"数学运算库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数学运算库","aria-hidden":"true"}},[this._v("#")]),this._v(" 数学运算库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("提供各种精度的定点运算支持")]),this._v(" "),e("li",[this._v("提供随机数生成器")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"libc库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#libc库","aria-hidden":"true"}},[this._v("#")]),this._v(" libc库")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[t._v("libc的一个轻量级实现，完全跨平台，并且针对不同架构进行了优化。")]),t._v(" "),i("li",[t._v("支持大部分字符串、宽字符串操作。")]),t._v(" "),i("li",[t._v("扩展字符串、宽字符串的各种大小写不敏感操作接口")]),t._v(" "),i("li",[t._v("扩展"),i("code",[t._v("memset_u16")]),t._v("、"),i("code",[t._v("memset_u32")]),t._v("等接口，并对其进行高度优化，尤其适合图形渲染程序")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"libm库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#libm库","aria-hidden":"true"}},[this._v("#")]),this._v(" libm库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("libm部分接口的一个轻量级实现，以及对常用系统接口的封装。（目前只实现了部分，之后有时间会完全实现掉）")]),this._v(" "),e("li",[this._v("扩展部分常用接口，增加对sqrt、log2等常用函数的整数版本计算，进行高度优化，不涉及浮点运算，适合嵌入式环境使用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"object库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object库","aria-hidden":"true"}},[this._v("#")]),this._v(" object库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("轻量级类apple的CoreFoundation库，支持object、dictionary、array、string、number、date、data等常用对象，并且可以方便扩展自定义对象的序列化。")]),this._v(" "),e("li",[this._v("支持对xml、json、binary以及apple的plist(xplist/bplist)格式序列化和反序列化。\n并且实现自有的binary序列化格式， 针对明文进行了简单的加密，在不影响性能的前提下，序列化后的大小比bplist节省30%。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"平台库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#平台库","aria-hidden":"true"}},[this._v("#")]),this._v(" 平台库")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[t._v("提供file、directory、socket、thread、time等常用系统接口")]),t._v(" "),i("li",[t._v("提供atomic、atomic64接口")]),t._v(" "),i("li",[t._v("提供高精度、低精度定时器")]),t._v(" "),i("li",[t._v("提供高性能的线程池操作")]),t._v(" "),i("li",[t._v("提供event、mutex、semaphore、spinlock等事件、互斥、信号量、自旋锁操作")]),t._v(" "),i("li",[t._v("提供获取函数堆栈信息的接口，方便调试和错误定位")]),t._v(" "),i("li",[t._v("提供跨平台动态库加载接口（如果系统支持的话）")]),t._v(" "),i("li",[t._v("提供io轮询器，针对epoll, poll, select, kqueue进行跨平台封装")]),t._v(" "),i("li",[t._v("提供跨平台上下文切换接口，主要用于协程实现，切换效率非常高")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"压缩库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#压缩库","aria-hidden":"true"}},[this._v("#")]),this._v(" 压缩库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("支持zlib/zlibraw/gzip的压缩与解压（需要第三方zlib库支持）。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"字符编码库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符编码库","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符编码库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("支持utf8、utf16、gbk、gb2312、uc2、uc4 之间的互相转码，并且支持大小端格式。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"实用工具库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实用工具库","aria-hidden":"true"}},[this._v("#")]),this._v(" 实用工具库")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[t._v("实现base64/32编解码")]),t._v(" "),i("li",[t._v("实现crc32、adler32、md5、sha1等常用hash算法")]),t._v(" "),i("li",[t._v("实现日志输出、断言等辅助调试工具")]),t._v(" "),i("li",[t._v("实现url编解码")]),t._v(" "),i("li",[t._v("实现位操作相关接口，支持各种数据格式的解析，可以对8bits、16bits、32bits、64bits、float、double以及任意bits的字段进行解析操作，并且同时支持大端、小端和本地端模式，并针对部分操作进行了优化，像static_stream、stream都有相关接口对其进行了封装，方便在流上进行快速数据解析。")]),t._v(" "),i("li",[t._v("实现swap16、swap32、swap64等位交换操作，并针对各个平台进行了优化。")]),t._v(" "),i("li",[t._v("实现一些高级的位处理接口，例如：位0的快速统计、前导0和前导1的快速位计数、后导01的快速位计数")]),t._v(" "),i("li",[t._v("实现单例模块，可以对静态对象、实例对象进行快速的单例封装，实现全局线程安全")]),t._v(" "),i("li",[t._v("实现option模块，对命令行参数进行解析，提供快速方便的命令行选项建立和解析操作，对于写终端程序还是很有帮助的")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"正则表达式库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式库","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则表达式库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("支持匹配和替换操作")]),this._v(" "),e("li",[this._v("支持全局、多行、大小写不敏感等模式")]),this._v(" "),e("li",[this._v("使用pcre, pcre2和posix正则库")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"项目例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目例子","aria-hidden":"true"}},[this._v("#")]),this._v(" 项目例子")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"联系方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联系方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 联系方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("邮箱："),e("a",{attrs:{href:"mailto:waruqi@gmail.com"}},[this._v("waruqi@gmail.com")])])}],!1,null,null,null);_.options.__file="introduction.md";e.default=_.exports}}]);